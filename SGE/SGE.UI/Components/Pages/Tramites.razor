@page "/tramites/{IdUsuario}"

@rendermode InteractiveServer

@inject NavigationManager Navigation
<PageTitle>Tramite | SGE</PageTitle>
<Excepcion @ref="ventanaExcepcion"/>

<div class="container-lista-tramites">
    <h2> Lista de tramites </h2>

    @foreach (var tramite in tramites){
        <li>@tramite.Id - @tramite.EtiquetaTramite - @tramite.ExpedienteId - @tramite.Contenido - @tramite.IdUsuarioModificador</li>
    }
    
</div>

<form id="altaForm" @onsubmit="DarAltaTramite">
    <label for="expedienteID">Expediente ID:</label>
    <input type="number" id="expedienteID" @bind="expedienteID" placeholder="Ingrese el Expediente ID" required><br>

    <label for="contenido">Contenido:</label>
    <input type="text" id="contenido" @bind="contenido" placeholder="Ingrese el Contenido" required><br>

    <label for="etiqueta">Etiqueta:</label>
    <select id="etiqueta" @bind="etiqueta" required>
        <option value="EscritoPresentado">Escrito presentado</option>
        <option value="Despacho">Despacho</option>
        <option value="Notificacion">Notificacion</option>
        <option value="Resolucion">Resolución</option>
        <option value="PaseAEstudio">Pase a Estudio</option>
        <option value="PaseAlArchivo">Pase al Archivo</option>
    </select><br>
    <button type="submit">Enviar</button>
</form>

    <div class= "containerBaja">
        <form class="bajaForm" @onsubmit="()=>DarBajaTramite(idAEliminar)">
            <input type="text" id="idAEliminar" @bind="idAEliminar" placeholder="Ingrese id de tramite a eliminar" required><br>
            <button type="submit">Dar de baja tramite</button>
        </form>
    </div>

@code {
    [Parameter]
    public string? IdUsuario{get; set;}
    private int userId;
    private int expedienteID;
    private string? contenido;
    private string? etiqueta;
    private List<Tramite> tramites;

    private Tramites? tramitex;
    private Excepcion ventanaExcepcion = null!;

    private int idAEliminar;

   private void DarAltaTramite(){
        RepositorioUsuarioSQLite repouser= new RepositorioUsuarioSQLite();
        RepositorioTramiteSQLite repotramite = new RepositorioTramiteSQLite();
        RepositorioExpedienteSQLite repoexpediente = new RepositorioExpedienteSQLite();
        
        ServicioAutorizacion autorizacion = new ServicioAutorizacion(repouser);
        ServicioActualizacionEstado actualizacion = new ServicioActualizacionEstado(repoexpediente,repotramite);

        CasoDeUsoTramiteAlta tramiteAlta = new CasoDeUsoTramiteAlta(repotramite,autorizacion,actualizacion);
        try{
            tramiteAlta.Ejecutar(expedienteID,contenido,etiqueta,userId);
            Navigation.NavigateTo($"/home/{IdUsuario}");
            
        }
        catch(ValidacionException ex){  // Valida que los campos esten con +1 elementos
            ventanaExcepcion.Mensaje = $"{ex.Message}"; //Modificar el mensaje para que envie lo que le mandamos en los trhows 
            ventanaExcepcion.Mostrar();  //muestra
        }
        catch(AutorizacionException ex){ // Valida que tengas autorizacion para crear tramites
            ventanaExcepcion.Mensaje = $"{ex.Message}";
            ventanaExcepcion.Mostrar();
        }
    }

    private void DarBajaTramite(int xtramitebaja){
        //CasoDeUsoTramiteBaja(ITramiteRepositorio repo,ServicioAutorizacion autorizacion, ServicioActualizacionEstado actualizacion)
        RepositorioTramiteSQLite repotramite = new RepositorioTramiteSQLite();
        RepositorioUsuarioSQLite repouser = new RepositorioUsuarioSQLite();
        RepositorioExpedienteSQLite repoexpediente = new RepositorioExpedienteSQLite();

        ServicioAutorizacion autorizacion = new ServicioAutorizacion(repouser);
        ServicioActualizacionEstado actualizacion = new ServicioActualizacionEstado(repoexpediente,repotramite);
        
        CasoDeUsoTramiteBaja tramiteBaja = new CasoDeUsoTramiteBaja(repotramite,autorizacion,actualizacion);

        try{
            tramiteBaja.Ejecutar(xtramitebaja,userId);
            Navigation.NavigateTo($"/home/{IdUsuario}"); 
        }
        catch(ValidacionException ex){  // Valida que los campos esten con +1 elementos
            ventanaExcepcion.Mensaje = $"{ex.Message}"; //Modificar el mensaje para que envie lo que le mandamos en los trhows 
            ventanaExcepcion.Mostrar();  //muestra
        }
        catch(AutorizacionException ex){ // Valida que tengas autorizacion para crear tramites
            ventanaExcepcion.Mensaje = $"{ex.Message}";
            ventanaExcepcion.Mostrar();
        }
    }

   protected override async Task OnInitializedAsync(){
        
        RepositorioTramiteSQLite repotramite = new RepositorioTramiteSQLite();

        CasoDeUsoTramiteConsultaTodos listatodoslostramites = new CasoDeUsoTramiteConsultaTodos(repotramite);

        userId = int.Parse(IdUsuario); // esto castea de string a integer la variable IdUsuario
        try{
            tramites = listatodoslostramites.Ejecutar(); 
        }
        catch(ValidacionException ex){  // Valida que los campos esten con +1 elementos
            ventanaExcepcion.Mensaje = $"{ex.Message}"; //Modificar el mensaje para que envie lo que le mandamos en los trhows 
            ventanaExcepcion.Mostrar();  //muestra
        }
    }
}
