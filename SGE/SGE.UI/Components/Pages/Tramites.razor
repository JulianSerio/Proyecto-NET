@page "/tramites/{IdUsuario}"

@rendermode InteractiveServer

@inject NavigationManager Navigation
<PageTitle>Tramite | SGE</PageTitle>
<Excepcion @ref="ventanaExcepcion"/>

<div class="container-lista-tramites">
    <h2>Lista de tramites</h2>

    @foreach (var tramite in tramites){
        <li>@tramite.Id - @tramite.EtiquetaTramite - @tramite.ExpedienteId - @tramite.Contenido - @tramite.IdUsuarioModificador</li>
    }
</div>

<form id="altaForm" @onsubmit="DarAltaTramite">
    <label for="expedienteID">Expediente ID:</label>
    <input type="number" id="expedienteID" @bind="expedienteID" placeholder="Ingrese el Expediente ID" required><br>

    <label for="contenido">Contenido:</label>
    <input type="text" id="contenido" @bind="contenido" placeholder="Ingrese el Contenido" required><br>

    <label for="etiqueta">Etiqueta:</label>
    <select id="etiqueta" @bind="etiqueta" required>
        <option value="EscritoPresentado">Escrito presentado</option>
        <option value="Despacho">Despacho</option>
        <option value="Notificacion">Notificacion</option>
        <option value="Resolucion">Resolución</option>
        <option value="PaseAEstudio">Pase a Estudio</option>
        <option value="PaseAlArchivo">Pase al Archivo</option>
    </select><br>
    <button type="submit">Dar alta</button>
</form>

<div class="containerBaja">
    <form class="bajaForm" @onsubmit="()=>DarBajaTramite(idAEliminar)">
        <input type="text" id="idAEliminar" @bind="idAEliminar" placeholder="Ingrese id de tramite a eliminar" required><br>
        <button type="submit">Dar de baja tramite</button>
    </form>
</div>

<div class="containerModificacion">
    <form id="modificacionForm" @onsubmit="ModificarTramite">
        <h3>Modificar Trámite</h3>

        <div class="form-group">
            <label for="idTramite">ID del Trámite:</label>
            <input type="number" id="idTramite" @bind="idTramite" placeholder="Ingrese el ID del trámite" required />
        </div>

        <div class="form-group">
            <label for="contenidoModificado">Contenido:</label>
            <input type="text" id="contenidoModificado" @bind="contenidoModificado" placeholder="Ingrese el nuevo contenido" required />
        </div>

        <div class="form-group">
            <label for="etiquetaModificada">Etiqueta:</label>
            <select id="etiquetaModificada" @bind="etiquetaModificada" required>
                <option value="EscritoPresentado">Escrito presentado</option>
                <option value="Despacho">Despacho</option>
                <option value="Notificacion">Notificación</option>
                <option value="Resolucion">Resolución</option>
                <option value="PaseAEstudio">Pase a Estudio</option>
                <option value="PaseAlArchivo">Pase al Archivo</option>
            </select>
        </div>

        <button type="submit">Modificar Trámite</button>
    </form>
</div>

<div class="containerBusqueda">
    <label for="etiquetaABuscar">Buscar por etiqueta:</label>
    <select id="etiquetaABuscar" @bind="etiquetaABuscar" required>
        <option value="EscritoPresentado">Escrito presentado</option>
        <option value="Despacho">Despacho</option>
        <option value="Notificacion">Notificación</option>
        <option value="Resolucion">Resolución</option>
        <option value="PaseAEstudio">Pase a Estudio</option>
        <option value="PaseAlArchivo">Pase al Archivo</option>
    </select>
</div>

@code {
    [Parameter]
    public string? IdUsuario{get; set;}
    private int userId;
    private int expedienteID;
    private string? contenido;
    private string? etiqueta;
    private List<Tramite> tramites;
    private Tramites? tramitex;
    private Excepcion ventanaExcepcion = null!;
    private int idAEliminar;

    private int idTramite;
    private string contenidoModificado;
    private EtiquetaTramite.Etiquetas etiquetaModificada;
    private EtiquetaTramite.Etiquetas etiquetaABuscar;

    public List<Tramite>? buscarEtiqueta()
{
    RepositorioTramiteSQLite repotramite = new RepositorioTramiteSQLite();
    CasoDeUsoTramiteConsultaPorEtiqueta busquedaEtiqueta = new CasoDeUsoTramiteConsultaPorEtiqueta(repotramite);
    
    try
    {
        var resultadoBusqueda = busquedaEtiqueta.Ejecutar(etiquetaABuscar); // ¿Dónde se define 'etiquetaABuscar'?
        Navigation.NavigateTo($"/home/{IdUsuario}");
        return resultadoBusqueda; // Devolver el resultado de la búsqueda
    }
    catch (ValidacionException ex)
    {
        ventanaExcepcion.Mensaje = $"{ex.Message}";
        ventanaExcepcion.Mostrar();
        return null; // Devolver null en caso de ValidacionException
    }
    catch (AutorizacionException ex)
    {
        ventanaExcepcion.Mensaje = $"{ex.Message}";
        ventanaExcepcion.Mostrar();
        return null; // Devolver null en caso de AutorizacionException
    }

    // Debes asegurarte de devolver un valor en todas las rutas de ejecución
    // En este caso, puedes devolver null al final del método si ninguna excepción es lanzada
    return null;
}

    public void ModificarTramite(){
        RepositorioUsuarioSQLite repouser= new RepositorioUsuarioSQLite();
        RepositorioTramiteSQLite repotramite = new RepositorioTramiteSQLite();
        RepositorioExpedienteSQLite repoexpediente = new RepositorioExpedienteSQLite();
        
        ServicioAutorizacion autorizacion = new ServicioAutorizacion(repouser);
        ServicioActualizacionEstado actualizacion = new ServicioActualizacionEstado(repoexpediente,repotramite);
        CasoDeUsoTramiteModificacion tramiteModificacion = new CasoDeUsoTramiteModificacion(repotramite,autorizacion,actualizacion);
        
        try{
            tramiteModificacion.Ejecutar(idTramite,contenidoModificado,etiquetaModificada,userId);
            Navigation.NavigateTo($"/home/{IdUsuario}");
        }
        catch(ValidacionException ex){  // Valida que los campos esten con +1 elementos
            ventanaExcepcion.Mensaje = $"{ex.Message}"; //Modificar el mensaje para que envie lo que le mandamos en los trhows 
            ventanaExcepcion.Mostrar();  //muestra
        }
        catch(AutorizacionException ex){ // Valida que tengas autorizacion para crear tramites
            ventanaExcepcion.Mensaje = $"{ex.Message}";
            ventanaExcepcion.Mostrar();
        }
    }

   private void DarAltaTramite(){
        RepositorioUsuarioSQLite repouser= new RepositorioUsuarioSQLite();
        RepositorioTramiteSQLite repotramite = new RepositorioTramiteSQLite();
        RepositorioExpedienteSQLite repoexpediente = new RepositorioExpedienteSQLite();
        
        ServicioAutorizacion autorizacion = new ServicioAutorizacion(repouser);
        ServicioActualizacionEstado actualizacion = new ServicioActualizacionEstado(repoexpediente,repotramite);

        CasoDeUsoTramiteAlta tramiteAlta = new CasoDeUsoTramiteAlta(repotramite,autorizacion,actualizacion);
        try{
            tramiteAlta.Ejecutar(expedienteID,contenido,etiqueta,userId);
            Navigation.NavigateTo($"/home/{IdUsuario}");
            
        }
        catch(ValidacionException ex){  // Valida que los campos esten con +1 elementos
            ventanaExcepcion.Mensaje = $"{ex.Message}"; //Modificar el mensaje para que envie lo que le mandamos en los trhows 
            ventanaExcepcion.Mostrar();  //muestra
        }
        catch(AutorizacionException ex){ // Valida que tengas autorizacion para crear tramites
            ventanaExcepcion.Mensaje = $"{ex.Message}";
            ventanaExcepcion.Mostrar();
        }
    }

    private void DarBajaTramite(int xtramitebaja){
        //CasoDeUsoTramiteBaja(ITramiteRepositorio repo,ServicioAutorizacion autorizacion, ServicioActualizacionEstado actualizacion)
        RepositorioTramiteSQLite repotramite = new RepositorioTramiteSQLite();
        RepositorioUsuarioSQLite repouser = new RepositorioUsuarioSQLite();
        RepositorioExpedienteSQLite repoexpediente = new RepositorioExpedienteSQLite();

        ServicioAutorizacion autorizacion = new ServicioAutorizacion(repouser);
        ServicioActualizacionEstado actualizacion = new ServicioActualizacionEstado(repoexpediente,repotramite);
        
        CasoDeUsoTramiteBaja tramiteBaja = new CasoDeUsoTramiteBaja(repotramite,autorizacion,actualizacion);

        try{
            tramiteBaja.Ejecutar(xtramitebaja,userId);
            Navigation.NavigateTo($"/home/{IdUsuario}"); 
        }
        catch(ValidacionException ex){  // Valida que los campos esten con +1 elementos
            ventanaExcepcion.Mensaje = $"{ex.Message}"; //Modificar el mensaje para que envie lo que le mandamos en los trhows 
            ventanaExcepcion.Mostrar();  //muestra
        }
        catch(AutorizacionException ex){ // Valida que tengas autorizacion para crear tramites
            ventanaExcepcion.Mensaje = $"{ex.Message}";
            ventanaExcepcion.Mostrar();
        }
    }

   protected override async Task OnInitializedAsync(){
        
        RepositorioTramiteSQLite repotramite = new RepositorioTramiteSQLite();

        CasoDeUsoTramiteConsultaTodos listatodoslostramites = new CasoDeUsoTramiteConsultaTodos(repotramite);

        userId = int.Parse(IdUsuario); // esto castea de string a integer la variable IdUsuario
        try{
            tramites = listatodoslostramites.Ejecutar(); 
        }
        catch(ValidacionException ex){  // Valida que los campos esten con +1 elementos
            ventanaExcepcion.Mensaje = $"{ex.Message}"; //Modificar el mensaje para que envie lo que le mandamos en los trhows 
            ventanaExcepcion.Mostrar();  //muestra
        }
    }
}
